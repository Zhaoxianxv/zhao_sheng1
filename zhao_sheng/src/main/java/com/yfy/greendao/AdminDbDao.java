package com.yfy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADMIN_DB".
*/
public class AdminDbDao extends AbstractDao<AdminDb, Long> {

    public static final String TABLENAME = "ADMIN_DB";

    /**
     * Properties of entity AdminDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Isheadmasters = new Property(0, String.class, "isheadmasters", false, "ISHEADMASTERS");
        public final static Property Isassessadmin = new Property(1, String.class, "isassessadmin", false, "ISASSESSADMIN");
        public final static Property Isclassmaster = new Property(2, String.class, "isclassmaster", false, "ISCLASSMASTER");
        public final static Property Isstuillcheck = new Property(3, String.class, "isstuillcheck", false, "ISSTUILLCHECK");
        public final static Property Ishqadmin = new Property(4, String.class, "ishqadmin", false, "ISHQADMIN");
        public final static Property Isnoticeadmin = new Property(5, String.class, "isnoticeadmin", false, "ISNOTICEADMIN");
        public final static Property Isqjadmin = new Property(6, String.class, "isqjadmin", false, "ISQJADMIN");
        public final static Property Isxcadmin = new Property(7, String.class, "isxcadmin", false, "ISXCADMIN");
        public final static Property IsfuncRoom = new Property(8, String.class, "isfuncRoom", false, "ISFUNC_ROOM");
        public final static Property Ishqlader = new Property(9, String.class, "ishqlader", false, "ISHQLADER");
        public final static Property Islogistics = new Property(10, String.class, "islogistics", false, "ISLOGISTICS");
        public final static Property Classinfo = new Property(11, String.class, "classinfo", false, "CLASSINFO");
        public final static Property Isdutyreport = new Property(12, String.class, "isdutyreport", false, "ISDUTYREPORT");
        public final static Property Iseventadmin = new Property(13, String.class, "iseventadmin", false, "ISEVENTADMIN");
        public final static Property Isoffice_supply = new Property(14, String.class, "isoffice_supply", false, "ISOFFICE_SUPPLY");
        public final static Property Isoffice_supply_master = new Property(15, String.class, "isoffice_supply_master", false, "ISOFFICE_SUPPLY_MASTER");
        public final static Property Issupplycount = new Property(16, String.class, "issupplycount", false, "ISSUPPLYCOUNT");
        public final static Property Issignetadmin = new Property(17, String.class, "issignetadmin", false, "ISSIGNETADMIN");
        public final static Property Iselectiveadmin = new Property(18, String.class, "iselectiveadmin", false, "ISELECTIVEADMIN");
        public final static Property Id = new Property(19, Long.class, "id", true, "_id");
    }


    public AdminDbDao(DaoConfig config) {
        super(config);
    }
    
    public AdminDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADMIN_DB\" (" + //
                "\"ISHEADMASTERS\" TEXT NOT NULL ," + // 0: isheadmasters
                "\"ISASSESSADMIN\" TEXT NOT NULL ," + // 1: isassessadmin
                "\"ISCLASSMASTER\" TEXT NOT NULL ," + // 2: isclassmaster
                "\"ISSTUILLCHECK\" TEXT NOT NULL ," + // 3: isstuillcheck
                "\"ISHQADMIN\" TEXT NOT NULL ," + // 4: ishqadmin
                "\"ISNOTICEADMIN\" TEXT NOT NULL ," + // 5: isnoticeadmin
                "\"ISQJADMIN\" TEXT NOT NULL ," + // 6: isqjadmin
                "\"ISXCADMIN\" TEXT NOT NULL ," + // 7: isxcadmin
                "\"ISFUNC_ROOM\" TEXT NOT NULL ," + // 8: isfuncRoom
                "\"ISHQLADER\" TEXT NOT NULL ," + // 9: ishqlader
                "\"ISLOGISTICS\" TEXT NOT NULL ," + // 10: islogistics
                "\"CLASSINFO\" TEXT NOT NULL ," + // 11: classinfo
                "\"ISDUTYREPORT\" TEXT NOT NULL ," + // 12: isdutyreport
                "\"ISEVENTADMIN\" TEXT NOT NULL ," + // 13: iseventadmin
                "\"ISOFFICE_SUPPLY\" TEXT NOT NULL ," + // 14: isoffice_supply
                "\"ISOFFICE_SUPPLY_MASTER\" TEXT NOT NULL ," + // 15: isoffice_supply_master
                "\"ISSUPPLYCOUNT\" TEXT NOT NULL ," + // 16: issupplycount
                "\"ISSIGNETADMIN\" TEXT NOT NULL ," + // 17: issignetadmin
                "\"ISELECTIVEADMIN\" TEXT NOT NULL ," + // 18: iselectiveadmin
                "\"_id\" INTEGER PRIMARY KEY );"); // 19: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADMIN_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdminDb entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIsheadmasters());
        stmt.bindString(2, entity.getIsassessadmin());
        stmt.bindString(3, entity.getIsclassmaster());
        stmt.bindString(4, entity.getIsstuillcheck());
        stmt.bindString(5, entity.getIshqadmin());
        stmt.bindString(6, entity.getIsnoticeadmin());
        stmt.bindString(7, entity.getIsqjadmin());
        stmt.bindString(8, entity.getIsxcadmin());
        stmt.bindString(9, entity.getIsfuncRoom());
        stmt.bindString(10, entity.getIshqlader());
        stmt.bindString(11, entity.getIslogistics());
        stmt.bindString(12, entity.getClassinfo());
        stmt.bindString(13, entity.getIsdutyreport());
        stmt.bindString(14, entity.getIseventadmin());
        stmt.bindString(15, entity.getIsoffice_supply());
        stmt.bindString(16, entity.getIsoffice_supply_master());
        stmt.bindString(17, entity.getIssupplycount());
        stmt.bindString(18, entity.getIssignetadmin());
        stmt.bindString(19, entity.getIselectiveadmin());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(20, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdminDb entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIsheadmasters());
        stmt.bindString(2, entity.getIsassessadmin());
        stmt.bindString(3, entity.getIsclassmaster());
        stmt.bindString(4, entity.getIsstuillcheck());
        stmt.bindString(5, entity.getIshqadmin());
        stmt.bindString(6, entity.getIsnoticeadmin());
        stmt.bindString(7, entity.getIsqjadmin());
        stmt.bindString(8, entity.getIsxcadmin());
        stmt.bindString(9, entity.getIsfuncRoom());
        stmt.bindString(10, entity.getIshqlader());
        stmt.bindString(11, entity.getIslogistics());
        stmt.bindString(12, entity.getClassinfo());
        stmt.bindString(13, entity.getIsdutyreport());
        stmt.bindString(14, entity.getIseventadmin());
        stmt.bindString(15, entity.getIsoffice_supply());
        stmt.bindString(16, entity.getIsoffice_supply_master());
        stmt.bindString(17, entity.getIssupplycount());
        stmt.bindString(18, entity.getIssignetadmin());
        stmt.bindString(19, entity.getIselectiveadmin());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(20, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19);
    }    

    @Override
    public AdminDb readEntity(Cursor cursor, int offset) {
        AdminDb entity = new AdminDb( //
            cursor.getString(offset + 0), // isheadmasters
            cursor.getString(offset + 1), // isassessadmin
            cursor.getString(offset + 2), // isclassmaster
            cursor.getString(offset + 3), // isstuillcheck
            cursor.getString(offset + 4), // ishqadmin
            cursor.getString(offset + 5), // isnoticeadmin
            cursor.getString(offset + 6), // isqjadmin
            cursor.getString(offset + 7), // isxcadmin
            cursor.getString(offset + 8), // isfuncRoom
            cursor.getString(offset + 9), // ishqlader
            cursor.getString(offset + 10), // islogistics
            cursor.getString(offset + 11), // classinfo
            cursor.getString(offset + 12), // isdutyreport
            cursor.getString(offset + 13), // iseventadmin
            cursor.getString(offset + 14), // isoffice_supply
            cursor.getString(offset + 15), // isoffice_supply_master
            cursor.getString(offset + 16), // issupplycount
            cursor.getString(offset + 17), // issignetadmin
            cursor.getString(offset + 18), // iselectiveadmin
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdminDb entity, int offset) {
        entity.setIsheadmasters(cursor.getString(offset + 0));
        entity.setIsassessadmin(cursor.getString(offset + 1));
        entity.setIsclassmaster(cursor.getString(offset + 2));
        entity.setIsstuillcheck(cursor.getString(offset + 3));
        entity.setIshqadmin(cursor.getString(offset + 4));
        entity.setIsnoticeadmin(cursor.getString(offset + 5));
        entity.setIsqjadmin(cursor.getString(offset + 6));
        entity.setIsxcadmin(cursor.getString(offset + 7));
        entity.setIsfuncRoom(cursor.getString(offset + 8));
        entity.setIshqlader(cursor.getString(offset + 9));
        entity.setIslogistics(cursor.getString(offset + 10));
        entity.setClassinfo(cursor.getString(offset + 11));
        entity.setIsdutyreport(cursor.getString(offset + 12));
        entity.setIseventadmin(cursor.getString(offset + 13));
        entity.setIsoffice_supply(cursor.getString(offset + 14));
        entity.setIsoffice_supply_master(cursor.getString(offset + 15));
        entity.setIssupplycount(cursor.getString(offset + 16));
        entity.setIssignetadmin(cursor.getString(offset + 17));
        entity.setIselectiveadmin(cursor.getString(offset + 18));
        entity.setId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdminDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdminDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdminDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
